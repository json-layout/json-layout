"use strict";export const validate = validate16;export default validate16;const schema19 = {"$id":"https://json-layout.github.io/normalized-layout-keyword","title":"normalized layout","oneOf":[{"$ref":"#/$defs/switch"},{"$ref":"#/$defs/comp-object"}],"$defs":{"switch":{"type":"array","items":{"$ref":"#/$defs/comp-object"}},"comp-object":{"type":"object","discriminator":{"propertyName":"comp"},"required":["comp"],"oneOf":[{"$ref":"#/$defs/none"},{"$ref":"#/$defs/section"},{"$ref":"#/$defs/text-field"},{"$ref":"#/$defs/number-field"},{"$ref":"#/$defs/textarea"},{"$ref":"#/$defs/checkbox"}]},"none":{"type":"object","additionalProperties":false,"required":["comp"],"properties":{"comp":{"const":"none"},"if":{"$ref":"#/$defs/expression"}}},"section":{"type":"object","additionalProperties":false,"required":["comp"],"properties":{"comp":{"const":"section"},"if":{"$ref":"#/$defs/expression"},"title":{"type":"string"},"children":{"type":"array","items":{"type":"string"}}}},"text-field":{"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"text-field"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}},"number-field":{"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"number-field"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"},"step":{"type":"number"}}},"textarea":{"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"textarea"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}},"checkbox":{"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"checkbox"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}},"expression":{"type":"object","required":["type","expr"],"properties":{"type":{"type":"string","enum":["expr-eval","js-fn"],"default":"expr-eval"},"expr":{"type":"string"}}}}};const schema20 = {"type":"array","items":{"$ref":"#/$defs/comp-object"}};const schema21 = {"type":"object","discriminator":{"propertyName":"comp"},"required":["comp"],"oneOf":[{"$ref":"#/$defs/none"},{"$ref":"#/$defs/section"},{"$ref":"#/$defs/text-field"},{"$ref":"#/$defs/number-field"},{"$ref":"#/$defs/textarea"},{"$ref":"#/$defs/checkbox"}]};const schema22 = {"type":"object","additionalProperties":false,"required":["comp"],"properties":{"comp":{"const":"none"},"if":{"$ref":"#/$defs/expression"}}};const schema23 = {"type":"object","required":["type","expr"],"properties":{"type":{"type":"string","enum":["expr-eval","js-fn"],"default":"expr-eval"},"expr":{"type":"string"}}};function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.comp === undefined) && (missing0 = "comp")){validate19.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "comp") || (key0 === "if"))){validate19.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("none" !== data.comp){validate19.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "none"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate19.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate19.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate19.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate19.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate19.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}const schema24 = {"type":"object","additionalProperties":false,"required":["comp"],"properties":{"comp":{"const":"section"},"if":{"$ref":"#/$defs/expression"},"title":{"type":"string"},"children":{"type":"array","items":{"type":"string"}}}};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.comp === undefined) && (missing0 = "comp")){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "comp") || (key0 === "if")) || (key0 === "title")) || (key0 === "children"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("section" !== data.comp){validate20.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "section"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate20.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate20.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate20.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate20.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate20.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs10 = errors;if(typeof data.title !== "string"){validate20.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.children !== undefined){let data5 = data.children;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){const _errs14 = errors;if(typeof data5[i0] !== "string"){validate20.errors = [{instancePath:instancePath+"/children/" + i0,schemaPath:"#/properties/children/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs14 === errors;if(!valid3){break;}}}else {validate20.errors = [{instancePath:instancePath+"/children",schemaPath:"#/properties/children/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}const schema26 = {"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"text-field"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}};function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.comp === undefined) && (missing0 = "comp")) || ((data.label === undefined) && (missing0 = "label"))){validate21.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "comp") || (key0 === "if")) || (key0 === "label"))){validate21.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("text-field" !== data.comp){validate21.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "text-field"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate21.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate21.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate21.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate21.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate21.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.label !== undefined){const _errs10 = errors;if(typeof data.label !== "string"){validate21.errors = [{instancePath:instancePath+"/label",schemaPath:"#/properties/label/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}else {validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate21.errors = vErrors;return errors === 0;}const schema28 = {"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"number-field"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"},"step":{"type":"number"}}};function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.comp === undefined) && (missing0 = "comp")) || ((data.label === undefined) && (missing0 = "label"))){validate22.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "comp") || (key0 === "if")) || (key0 === "label")) || (key0 === "step"))){validate22.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("number-field" !== data.comp){validate22.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "number-field"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate22.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate22.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate22.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate22.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate22.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.label !== undefined){const _errs10 = errors;if(typeof data.label !== "string"){validate22.errors = [{instancePath:instancePath+"/label",schemaPath:"#/properties/label/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.step !== undefined){let data5 = data.step;const _errs12 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate22.errors = [{instancePath:instancePath+"/step",schemaPath:"#/properties/step/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}else {validate22.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate22.errors = vErrors;return errors === 0;}const schema30 = {"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"textarea"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}};function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.comp === undefined) && (missing0 = "comp")) || ((data.label === undefined) && (missing0 = "label"))){validate23.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "comp") || (key0 === "if")) || (key0 === "label"))){validate23.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("textarea" !== data.comp){validate23.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "textarea"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate23.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate23.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate23.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate23.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate23.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.label !== undefined){const _errs10 = errors;if(typeof data.label !== "string"){validate23.errors = [{instancePath:instancePath+"/label",schemaPath:"#/properties/label/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}else {validate23.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate23.errors = vErrors;return errors === 0;}const schema32 = {"type":"object","additionalProperties":false,"required":["comp","label"],"properties":{"comp":{"const":"checkbox"},"if":{"$ref":"#/$defs/expression"},"label":{"type":"string"}}};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.comp === undefined) && (missing0 = "comp")) || ((data.label === undefined) && (missing0 = "label"))){validate24.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "comp") || (key0 === "if")) || (key0 === "label"))){validate24.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){const _errs2 = errors;if("checkbox" !== data.comp){validate24.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/properties/comp/const",keyword:"const",params:{allowedValue: "checkbox"},message:"must be equal to constant"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data1 = data.if;const _errs3 = errors;const _errs4 = errors;if(errors === _errs4){if(data1 && typeof data1 == "object" && !Array.isArray(data1)){let missing1;if(((data1.type === undefined) && (missing1 = "type")) || ((data1.expr === undefined) && (missing1 = "expr"))){validate24.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data1.type !== undefined){let data2 = data1.type;const _errs6 = errors;if(typeof data2 !== "string"){validate24.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((data2 === "expr-eval") || (data2 === "js-fn"))){validate24.errors = [{instancePath:instancePath+"/if/type",schemaPath:"#/$defs/expression/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data1.expr !== undefined){const _errs8 = errors;if(typeof data1.expr !== "string"){validate24.errors = [{instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/expression/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}}else {validate24.errors = [{instancePath:instancePath+"/if",schemaPath:"#/$defs/expression/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.label !== undefined){const _errs10 = errors;if(typeof data.label !== "string"){validate24.errors = [{instancePath:instancePath+"/label",schemaPath:"#/properties/label/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}else {validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate24.errors = vErrors;return errors === 0;}function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.comp === undefined) && (missing0 = "comp")){validate18.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const tag0 = data.comp;if(typeof tag0 == "string"){if(tag0 === "none"){if(!(validate19(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);errors = vErrors.length;}}else if(tag0 === "section"){if(!(validate20(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);errors = vErrors.length;}}else if(tag0 === "text-field"){if(!(validate21(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);errors = vErrors.length;}}else if(tag0 === "number-field"){if(!(validate22(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);errors = vErrors.length;}}else if(tag0 === "textarea"){if(!(validate23(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);errors = vErrors.length;}}else if(tag0 === "checkbox"){if(!(validate24(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}}else {validate18.errors = [{instancePath,schemaPath:"#/discriminator",keyword:"discriminator",params:{error: "mapping", tag: "comp", tagValue: tag0},message:"value of tag \"comp\" must be in oneOf"}];return false;}}else {validate18.errors = [{instancePath,schemaPath:"#/discriminator",keyword:"discriminator",params:{error: "tag", tag: "comp", tagValue: tag0},message:"tag \"comp\" must be string"}];return false;}}}else {validate18.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate18.errors = vErrors;return errors === 0;}function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate18(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate17.errors = vErrors;return errors === 0;}function validate16(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://json-layout.github.io/normalized-layout-keyword" */;let vErrors = null;let errors = 0;const _errs0 = errors;let valid0 = false;let passing0 = null;const _errs1 = errors;if(!(validate17(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);errors = vErrors.length;}var _valid0 = _errs1 === errors;if(_valid0){valid0 = true;passing0 = 0;}const _errs2 = errors;if(!(validate18(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}var _valid0 = _errs2 === errors;if(_valid0 && valid0){valid0 = false;passing0 = [passing0, 1];}else {if(_valid0){valid0 = true;passing0 = 1;}}if(!valid0){const err0 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;validate16.errors = vErrors;return false;}else {errors = _errs0;if(vErrors !== null){if(_errs0){vErrors.length = _errs0;}else {vErrors = null;}}}validate16.errors = vErrors;return errors === 0;}