"use strict";export const validate = validate10;export default validate10;const schema11 = {"$id":"https://json-layout.github.io/layout-keyword","title":"layout keyword","oneOf":[{"$ref":"#/$defs/comp-name"},{"$ref":"#/$defs/children"},{"$ref":"#/$defs/partial-comp-object"},{"$ref":"#/$defs/partial-switch"}],"$defs":{"partial-switch":{"type":"array","items":{"$ref":"#/$defs/partial-comp-object"}},"partial-comp-object":{"title":"partial comp object","type":"object","additionalProperties":false,"properties":{"comp":{"$ref":"#/$defs/comp-name"},"children":{"$ref":"#/$defs/children"},"label":{"type":"string"},"title":{"type":"string"},"step":{"type":"number"},"if":{"$ref":"#/$defs/partial-expression"}}},"comp-name":{"title":"component name","type":"string","enum":["none","text-field","number-field","textarea","checkbox","list"]},"children":{"type":"array","items":{"type":"string"}},"partial-expression":{"oneOf":[{"type":"string"},{"type":"object","required":["expr"],"properties":{"type":{"type":"string","enum":["expr-eval","js-fn"],"default":"expr-eval"},"expr":{"type":"string"}}}]}}};const schema12 = {"title":"component name","type":"string","enum":["none","text-field","number-field","textarea","checkbox","list"]};const schema13 = {"type":"array","items":{"type":"string"}};const schema14 = {"title":"partial comp object","type":"object","additionalProperties":false,"properties":{"comp":{"$ref":"#/$defs/comp-name"},"children":{"$ref":"#/$defs/children"},"label":{"type":"string"},"title":{"type":"string"},"step":{"type":"number"},"if":{"$ref":"#/$defs/partial-expression"}}};const schema17 = {"oneOf":[{"type":"string"},{"type":"object","required":["expr"],"properties":{"type":{"type":"string","enum":["expr-eval","js-fn"],"default":"expr-eval"},"expr":{"type":"string"}}}]};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!((((((key0 === "comp") || (key0 === "children")) || (key0 === "label")) || (key0 === "title")) || (key0 === "step")) || (key0 === "if"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.comp !== undefined){let data0 = data.comp;const _errs2 = errors;if(typeof data0 !== "string"){validate11.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/$defs/comp-name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((((data0 === "none") || (data0 === "text-field")) || (data0 === "number-field")) || (data0 === "textarea")) || (data0 === "checkbox")) || (data0 === "list"))){validate11.errors = [{instancePath:instancePath+"/comp",schemaPath:"#/$defs/comp-name/enum",keyword:"enum",params:{allowedValues: schema12.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.children !== undefined){let data1 = data.children;const _errs5 = errors;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data1)){var valid3 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs8 = errors;if(typeof data1[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/children/" + i0,schemaPath:"#/$defs/children/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs8 === errors;if(!valid3){break;}}}else {validate11.errors = [{instancePath:instancePath+"/children",schemaPath:"#/$defs/children/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.label !== undefined){const _errs10 = errors;if(typeof data.label !== "string"){validate11.errors = [{instancePath:instancePath+"/label",schemaPath:"#/properties/label/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs12 = errors;if(typeof data.title !== "string"){validate11.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.step !== undefined){let data5 = data.step;const _errs14 = errors;if(!((typeof data5 == "number") && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/step",schemaPath:"#/properties/step/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.if !== undefined){let data6 = data.if;const _errs16 = errors;const _errs18 = errors;let valid5 = false;let passing0 = null;const _errs19 = errors;if(typeof data6 !== "string"){const err0 = {instancePath:instancePath+"/if",schemaPath:"#/$defs/partial-expression/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}var _valid0 = _errs19 === errors;if(_valid0){valid5 = true;passing0 = 0;}const _errs21 = errors;if(errors === _errs21){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing0;if((data6.expr === undefined) && (missing0 = "expr")){const err1 = {instancePath:instancePath+"/if",schemaPath:"#/$defs/partial-expression/oneOf/1/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}else {if(data6.type !== undefined){let data7 = data6.type;const _errs23 = errors;if(typeof data7 !== "string"){const err2 = {instancePath:instancePath+"/if/type",schemaPath:"#/$defs/partial-expression/oneOf/1/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!((data7 === "expr-eval") || (data7 === "js-fn"))){const err3 = {instancePath:instancePath+"/if/type",schemaPath:"#/$defs/partial-expression/oneOf/1/properties/type/enum",keyword:"enum",params:{allowedValues: schema17.oneOf[1].properties.type.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}var valid6 = _errs23 === errors;}else {var valid6 = true;}if(valid6){if(data6.expr !== undefined){const _errs25 = errors;if(typeof data6.expr !== "string"){const err4 = {instancePath:instancePath+"/if/expr",schemaPath:"#/$defs/partial-expression/oneOf/1/properties/expr/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}var valid6 = _errs25 === errors;}else {var valid6 = true;}}}}else {const err5 = {instancePath:instancePath+"/if",schemaPath:"#/$defs/partial-expression/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 1];}else {if(_valid0){valid5 = true;passing0 = 1;}}if(!valid5){const err6 = {instancePath:instancePath+"/if",schemaPath:"#/$defs/partial-expression/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;validate11.errors = vErrors;return false;}else {errors = _errs18;if(vErrors !== null){if(_errs18){vErrors.length = _errs18;}else {vErrors = null;}}}var valid0 = _errs16 === errors;}else {var valid0 = true;}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}const schema18 = {"type":"array","items":{"$ref":"#/$defs/partial-comp-object"}};function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate13.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="https://json-layout.github.io/layout-keyword" */;let vErrors = null;let errors = 0;const _errs0 = errors;let valid0 = false;let passing0 = null;const _errs1 = errors;if(typeof data !== "string"){const err0 = {instancePath,schemaPath:"#/$defs/comp-name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(!((((((data === "none") || (data === "text-field")) || (data === "number-field")) || (data === "textarea")) || (data === "checkbox")) || (data === "list"))){const err1 = {instancePath,schemaPath:"#/$defs/comp-name/enum",keyword:"enum",params:{allowedValues: schema12.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}var _valid0 = _errs1 === errors;if(_valid0){valid0 = true;passing0 = 0;}const _errs4 = errors;const _errs5 = errors;if(errors === _errs5){if(Array.isArray(data)){var valid3 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs7 = errors;if(typeof data[i0] !== "string"){const err2 = {instancePath:instancePath+"/" + i0,schemaPath:"#/$defs/children/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}var valid3 = _errs7 === errors;if(!valid3){break;}}}else {const err3 = {instancePath,schemaPath:"#/$defs/children/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs4 === errors;if(_valid0 && valid0){valid0 = false;passing0 = [passing0, 1];}else {if(_valid0){valid0 = true;passing0 = 1;}const _errs9 = errors;if(!(validate11(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var _valid0 = _errs9 === errors;if(_valid0 && valid0){valid0 = false;passing0 = [passing0, 2];}else {if(_valid0){valid0 = true;passing0 = 2;}const _errs10 = errors;if(!(validate13(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var _valid0 = _errs10 === errors;if(_valid0 && valid0){valid0 = false;passing0 = [passing0, 3];}else {if(_valid0){valid0 = true;passing0 = 3;}}}}if(!valid0){const err4 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;validate10.errors = vErrors;return false;}else {errors = _errs0;if(vErrors !== null){if(_errs0){vErrors.length = _errs0;}else {vErrors = null;}}}validate10.errors = vErrors;return errors === 0;}